import Head from "next/head";
import { memo } from "react";
import { Canvas } from "@react-three/fiber";
import {
  Grid,
  Center,
  GizmoHelper,
  GizmoViewport,
  AccumulativeShadows,
  RandomizedLight,
  OrbitControls,
  Environment,
} from "@react-three/drei";
import { useControls } from "leva";
import calendar from "../data/calendar.json";

type eventType = {
  start: {
    dateTime: string;
  };
  end: {
    dateTime: string;
  };
};

const getEventTime = (event: eventType) => {
  // only designed for events that start and end on the same day

  const startDate = new Date(event.start.dateTime);
  const startDay = startDate.getDay();
  const startHour = startDate.getHours();

  const endDate = new Date(event.end.dateTime);
  const endDay = endDate.getDay();
  const endHour = endDate.getHours();

  // calculate the duration of the event
  const duration = endDate.getTime() - startDate.getTime();
  const durationInHours = duration / (1000 * 60 * 60);

  return { startDay, startHour, endDay, endHour, durationInHours };
};

export default function Home() {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex flex-col items-center justify-center h-screen p-4">
        <App />
      </main>
    </>
  );
}

function App() {
  const { gridSize, ...gridConfig } = useControls({
    gridSize: [8, 24],
    cellSize: { value: 1, min: 0, max: 10, step: 0.1 },
    cellThickness: { value: 1, min: 0, max: 5, step: 0.1 },
    cellColor: "#6f6f6f",
    sectionSize: { value: 1, min: 0, max: 10, step: 0.1 },
    sectionThickness: { value: 1, min: 0, max: 5, step: 0.1 },
    sectionColor: "#9d4b4b",
    fadeDistance: { value: 100, min: 0, max: 100, step: 1 },
    fadeStrength: { value: 0, min: 0, max: 1, step: 0.1 },
    followCamera: false,
    infiniteGrid: false,
  });

  const { time, day } = useControls({
    time: 0,
    day: 0,
  });

  return (
    <Canvas shadows camera={{ position: [10, 12, 12], fov: 25 }}>
      <group position={[0, 0, 0]}>
        {calendar.items.map((event) => {
          const { startDay, startHour, durationInHours } = getEventTime(event);
          return (
            <Center
              key={event.id}
              top
              position={[(startDay * 24) / 7 - 12, 0, startHour - 11.5]}
            >
              <mesh castShadow rotation={[0, 0, 0]}>
                <boxGeometry args={[24 / 7, 1, durationInHours]} />
                <meshStandardMaterial color="#9d4b4b" />
              </mesh>
            </Center>
          );
        })}
        <Shadows />
        <Grid
          position={[0, 0, 0]}
          args={gridSize}
          {...gridConfig}
          scale={[24 / 7, 1, 1]}
        />
      </group>
      <OrbitControls makeDefault />
      <Environment preset="city" />
      <GizmoHelper alignment="bottom-right" margin={[80, 80]}>
        <GizmoViewport
          axisColors={["#9d4b4b", "#2f7f4f", "#3b5b9d"]}
          labelColor="white"
        />
      </GizmoHelper>
    </Canvas>
  );
}

const Shadows = () => (
  <AccumulativeShadows
    temporal
    frames={100}
    color="#9d4b4b"
    colorBlend={0.5}
    alphaTest={0.9}
    scale={20}
  >
    <RandomizedLight amount={8} radius={4} position={[5, 5, -10]} />
  </AccumulativeShadows>
);
